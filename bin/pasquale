#!/usr/bin/env node

'use strict';

var yargs = require('yargs')
	,	path = require('path')
	,	Pasquale = require('../src/main')
	,	jsonReporter = require('../src/reporter-json')
	,	config = require('../src/config')
	,	cfg = config.load(path.resolve(__dirname, '../.pasqualerc'))
	,	argv = null
	,	pasquale = null;

/**
 * CLI
 */

argv = yargs
	.usage('Checks for spelling errors.\nUsage: $0 --lang=[lang] [text]')
	.example('$0 --lang=pt-br istu Ã© errado', 'Finds errors in pt-br text')
	.example('$0 --default=pt-br', 'Sets default lang to pt-br')
	.options('l', {
		alias: 'lang',
		default: cfg.default || 'en-ca',
		description: 'The language to check spelling against'
	})
	.options('t', {
		alias: 'text',
		description: 'The text to have spelling checked against'
	})
	.options('r', {
		alias: 'reporter',
		default: 'json',
		description: 'Specifies which reporter to use'
	})
	.options('d', {
		alias: 'default',
		description: 'Specifies which lang to be set as default. This \n' +
								 '\t\t\t  one will be saved at the config file'
	})
	.options('i', {
		alias: 'ignored',
		description: 'Refers to the list of ignored words. If no other\n' +
								 '\t\t\t  args, lists the ignored words. It might be\n' +
								 '\t\t\t  used with --add, --remove.'
	})
	.options('ri', {
		alias: 'remove-ignored',
		description: 'Removes a word from the list of ignored ones'
	})
	.argv;

var lang 			= argv.lang
	,	reporter 	= argv.reporter
	,	ignored 	= argv.ignored
	,	def 			= argv.default
	,	text 			= argv.text || argv._.join(' ');

if (argv.h || argv.help) {
	yargs.showHelp();
	process.exit(0);
}

/**
 * If --default arg, add the default lang
 */
if (def) {
	cfg = config.add(cfg, 'default', def);
	process.exit(0);
}

if (ignored) {
	if (!reporter.length)
		cfg = config.remove(cfg, 'ignored', ignored);
	else if (reporter.length && ignored.length)
		cfg = config.add(cfg, 'ignored', ignored);

	console.log(cfg.ignored);
	process.exit(0);
}

if (!text) {
	yargs.showHelp();
	process.exit(0);
}

/**
 * Main
 */

pasquale = new Pasquale();
pasquale.setLanguage(lang);

if (process.stdin.isTTY) handleTTY();
else handlePipe();

/**
 * Control Functions
 */

function handlePipe () {
	// TODO
}

function handleTTY () {
	pasquale.checkTextSpell(text).then(function (results) {
		if (reporter.toLowerCase() === 'json') {
			console.log(jsonReporter(results));
		}
	}, function (err) {
		console.error(err);
	});
}
